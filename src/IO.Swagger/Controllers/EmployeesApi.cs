/*
 * Car Workshop
 *
 * <h2> WILL BE UPDATED!</h2></br><b>Incomplete</b> API for car workshop system (lacks employees and parts management).</br><a href=\"https://app.swaggerhub.com/apis/soft_eng/project/0.1.1\">Swagger project (contains models)</a>.
 *
 * OpenAPI spec version: 0.1.1
 * Contact: k.baciejowski@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EmployeesApiController : ControllerBase
    { 
        /// <summary>
        /// Add new employee
        /// </summary>
        
        /// <param name="body"></param>
        /// <response code="400">Validation exception</response>
        [HttpPost]
        [Route("/soft_eng/project/0.1.1/employee")]
        [ValidateModelState]
        [SwaggerOperation("AddEmployee")]
        public virtual IActionResult AddEmployee([FromBody]Body1 body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Marks diagnostic as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/soft_eng/project/0.1.1/visit/{visitId}/diagnose")]
        [ValidateModelState]
        [SwaggerOperation("Diagnose")]
        public virtual IActionResult Diagnose([FromRoute][Required]int? visitId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Marks maintenance as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/soft_eng/project/0.1.1/visit/{visitId}/maintain")]
        [ValidateModelState]
        [SwaggerOperation("Maintain")]
        public virtual IActionResult Maintain([FromRoute][Required]int? visitId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Marks repairment as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/soft_eng/project/0.1.1/visit/{visitId}/repair")]
        [ValidateModelState]
        [SwaggerOperation("Repair")]
        public virtual IActionResult Repair([FromRoute][Required]int? visitId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Set client&#39;s discount
        /// </summary>
        /// <remarks>Accepts discount in percentage (0-30)</remarks>
        /// <param name="clientId">Client id</param>
        /// <param name="body">New client&#39;s discount</param>
        /// <response code="400">Validation exception</response>
        /// <response code="404">Client not found</response>
        [HttpPut]
        [Route("/soft_eng/project/0.1.1/client/{clientId}/set_discount")]
        [ValidateModelState]
        [SwaggerOperation("SetDiscount")]
        public virtual IActionResult SetDiscount([FromRoute][Required]int? clientId, [FromBody]Body2 body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Overwrite car profile
        /// </summary>
        /// <remarks>Overwrites diagnostic profile of designated car.</remarks>
        /// <param name="carId">Id of car assigned to the diagnostic profile</param>
        /// <param name="profile">New diagnostic profile object</param>
        /// <response code="400">Validation exception</response>
        /// <response code="404">Profile not found</response>
        [HttpPut]
        [Route("/soft_eng/project/0.1.1/car/{carId}/profile")]
        [ValidateModelState]
        [SwaggerOperation("SetProfile")]
        public virtual IActionResult SetProfile([FromRoute][Required]int? carId, [FromBody]DiagnosticProfile profile)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Update a visit
        /// </summary>
        
        /// <param name="body"></param>
        /// <response code="400">Validation exception</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/soft_eng/project/0.1.1/visit")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVisit")]
        public virtual IActionResult UpdateVisit([FromBody]Visit body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }
    }
}
