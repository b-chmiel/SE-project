/*
 * Car Workshop
 *
 * <h2> WILL BE UPDATED!</h2></br><b>Incomplete</b> API for car workshop system (lacks employees and parts management).</br><a href=\"https://app.swaggerhub.com/apis/soft_eng/project/0.1.1\">Swagger project (contains models)</a>.
 *
 * OpenAPI spec version: 0.1.1
 * Contact: k.baciejowski@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace se_project.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Payment : IEquatable<Payment>
    { 
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Advance
        /// </summary>
        [DataMember(Name="advance")]
        public decimal? Advance { get; set; }

        /// <summary>
        /// Gets or Sets IsFulfilled
        /// </summary>
        [DataMember(Name="isFulfilled")]
        public bool? IsFulfilled { get; set; }

        [Key]
        [DataMember(Name = "visitId")]
        public int VisitId { get; set; }
        public Visit Visit{ get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Advance: ").Append(Advance).Append("\n");
            sb.Append("  IsFulfilled: ").Append(IsFulfilled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payment)obj);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Advance == other.Advance ||
                    Advance != null &&
                    Advance.Equals(other.Advance)
                ) && 
                (
                    IsFulfilled == other.IsFulfilled ||
                    IsFulfilled != null &&
                    IsFulfilled.Equals(other.IsFulfilled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Advance != null)
                    hashCode = hashCode * 59 + Advance.GetHashCode();
                    if (IsFulfilled != null)
                    hashCode = hashCode * 59 + IsFulfilled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Payment left, Payment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payment left, Payment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
