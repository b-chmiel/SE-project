/*
 * Car Workshop
 *
 * <h2> WILL BE UPDATED!</h2></br><b>Incomplete</b> API for car workshop system (lacks employees and parts management).</br><a href=\"https://app.swaggerhub.com/apis/soft_eng/project/0.1.1\">Swagger project (contains models)</a>.
 *
 * OpenAPI spec version: 0.1.1
 * Contact: k.baciejowski@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using se_project.Attributes;
using Microsoft.AspNetCore.Authorization;
using se_project.Models;
using se_project.Functions;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace se_project.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PaymentsApiController : ControllerBase
    {
        private readonly CompanyDBEntities _context;
        public PaymentsApiController(CompanyDBEntities context)
        {
            _context = context;
        }
        /// <summary>
        /// Read payment information
        /// </summary>

        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpGet]
        [Route("/api/0.1.1/payments/{visitId}")]
        [ValidateModelState]
        [SwaggerOperation("PaymentVisitIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Payment), description: "Successful operation")]
        public virtual IActionResult PaymentVisitIdGet([FromRoute][Required]int visitId)
        {
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            Visit visit = _context.Visits.FirstOrDefault(v => v.VisitId == visitId);
            if ((visit != null && !visit.CarOwnerUsername.Equals(sender.Item1)) && !(sender.Item2 == UserType.WORKSHOP_EMPLOYEE || sender.Item2 == UserType.INSURANCE_EMPLOYEE))
                return StatusCode(403);
            if (visit is null)
                return StatusCode(404);
            Payment payment = _context.Payments.FirstOrDefault(v => v.VisitId == visitId);
            if (payment is null)
                return new ObjectResult(new Payment() { Amount = visit.Price, Advance = 0, IsFulfilled = visit.Price is null || visit.Price == 0 });
            return new ObjectResult(payment);
        }

        /// <summary>
        /// Create/overwrite payment.
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <param name="body"></param>
        /// <response code="400">Validation exception</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/payments/{visitId}")]
        [ValidateModelState]
        [SwaggerOperation("PaymentVisitIdPut")]
        public virtual IActionResult PaymentVisitIdPut([FromRoute][Required]int visitId, [FromBody]Payment body)
        {
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            if (sender.Item2 != UserType.WORKSHOP_EMPLOYEE)
                return StatusCode(403);
            Visit visit = _context.Visits.FirstOrDefault(v => v.VisitId == visitId);
            if (visit is null)
                return StatusCode(404);
            body.VisitId = visitId;
            if (visit.Payment is null)
            {
                if (body.Amount is null) body.Amount = visit.Price is null ? 0 : visit.Price;
                if (body.Advance is null) body.Advance = 0;
                if (body.IsFulfilled is null) body.IsFulfilled = body.Amount <= body.Advance;
                body.Visit = visit;
                _context.Add(body);
            }
            else
            {
                Payment payment = visit.Payment;
                payment.Amount = body.Amount is null ? payment.Amount : body.Amount;
                payment.Advance = body.Advance is null ? payment.Advance : body.Advance;
                payment.IsFulfilled = body.IsFulfilled is null ? payment.IsFulfilled : body.IsFulfilled;
            }
            try
            {
                _context.SaveChanges();
            }
            catch (DbUpdateException)
            {
                return StatusCode(400);
            }
            return new ObjectResult(visit.Payment);
        }
    }
}
