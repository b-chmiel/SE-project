/*
 * Car Workshop
 *
 * <h2> WILL BE UPDATED!</h2></br><b>Incomplete</b> API for car workshop system (lacks employees and parts management).</br><a href=\"https://app.swaggerhub.com/apis/soft_eng/project/0.1.1\">Swagger project (contains models)</a>.
 *
 * OpenAPI spec version: 0.1.1
 * Contact: k.baciejowski@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using se_project.Attributes;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using se_project.Functions;
using se_project.Models;

namespace se_project.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VisitsApiController : ControllerBase
    { 
        private readonly CompanyDBEntities _context;

        public VisitsApiController(CompanyDBEntities context)
        {
            _context = context;
        }
        /// <summary>
        /// Schedule a visit
        /// </summary>
        
        /// <param name="body">Information about scheduled visit. Required actions can be modified later on by an employee.</param>
        /// <response code="400">Validation exception</response>
        [HttpPost]
        [Route("/api/0.1.1/visit")]
        [ValidateModelState]
        [SwaggerOperation("AddVisit")]
        public virtual IActionResult AddVisit([FromBody]Body3 body)
        { 
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            
            var car = _context.Cars.FirstOrDefault(x => x.LicensePlate.Equals(body.LicensePlate));
            if (car is null)
            {
                return StatusCode(404);
            }

            var visit = new Visit
            {
                Date = body.Date,
                Car = car,
                LicensePlate = body.LicensePlate,
                CarOwnerUsername = sender.Item1,
                RequiredActions = body.RequiredActions,
                Status = 0
            };

            _context.Visits.Add(visit);
            try
            {
                _context.SaveChanges();
            }
            catch (DbUpdateException)
            {
                return StatusCode(400);
            }
            
            return new ObjectResult(visit);
        }

        /// <summary>
        /// Find visits by Status
        /// </summary>
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/api/0.1.1/visit/find_by_status")]
        [ValidateModelState]
        [SwaggerOperation("FindVisits")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse200>), description: "Successful operation")]
        public virtual IActionResult FindVisits([FromQuery][Required()]List<string> status)
        {
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            
            if (status.Count < 1)
            {
                return new ObjectResult(_context.Visits);
            }
            
            var visits = _context.Visits.Where(x => status.Contains(((Visit.StatusEnum)x.Status).ToString()));
            
            return new ObjectResult(visits);
        }

        /// <summary>
        /// Find visit by Id
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpGet]
        [Route("/api/0.1.1/visit/{visitId}")]
        [ValidateModelState]
        [SwaggerOperation("GetVisit")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse200>), description: "Successful operation")]
        public virtual IActionResult GetVisit([FromRoute][Required]int? visitId)
        {
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            
            if (visitId < 0)
            {
                return StatusCode(400);
            }
            
            var visit = _context.Visits.FirstOrDefault(x => x.VisitId.Equals(visitId));
            if (visit is null)
            {
                return StatusCode(404);
            }

            return new ObjectResult(visit);
        }
        
        /// <summary>
        /// Marks diagnostic as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/visit/{visitId}/diagnose")]
        [ValidateModelState]
        [SwaggerOperation("Diagnose")]
        public virtual IActionResult Diagnose([FromRoute][Required]int? visitId)
        { 
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            if (sender.Item2!=UserType.WORKSHOP_EMPLOYEE)
                return StatusCode(403); 
            
            var visit = _context.Visits.FirstOrDefault(x => x.VisitId.Equals(visitId));
            if (visit is null)
            {
                return StatusCode(404);
            }

            visit.Status = Visit.StatusEnum.CheckedInEnum;
            
            try
            {
                _context.SaveChanges();
            }
            catch (DbUpdateException)
            {
                return StatusCode(400);
            }
            
            return new ObjectResult(visit);
        }

        /// <summary>
        /// Marks maintenance as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/visit/{visitId}/maintain")]
        [ValidateModelState]
        [SwaggerOperation("Maintain")]
        public virtual IActionResult Maintain([FromRoute][Required]int? visitId)
        { 
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            if (sender.Item2!=UserType.WORKSHOP_EMPLOYEE)
                return StatusCode(403); 
            
            var visit = _context.Visits.FirstOrDefault(x => x.VisitId.Equals(visitId));
            if (visit is null)
            {
                return StatusCode(404);
            }

            visit.Status = Visit.StatusEnum.AtServiceEnum;
            
            try
            {
                _context.SaveChanges();
            }
            catch (DbUpdateException)
            {
                return StatusCode(400);
            }
            
            return new ObjectResult(visit);
        }

        /// <summary>
        /// Marks repairment as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/visit/{visitId}/repair")]
        [ValidateModelState]
        [SwaggerOperation("Repair")]
        public virtual IActionResult Repair([FromRoute][Required]int? visitId)
        { 
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            if (sender.Item2!=UserType.WORKSHOP_EMPLOYEE)
                return StatusCode(403); 
            
            var visit = _context.Visits.FirstOrDefault(x => x.VisitId.Equals(visitId));
            if (visit is null)
            {
                return StatusCode(404);
            }

            visit.Status = Visit.StatusEnum.RepairedEnum;
            
            try
            {
                _context.SaveChanges();
            }
            catch (DbUpdateException)
            {
                return StatusCode(400);
            }
            
            return new ObjectResult(visit);
        }

        /// <summary>
        /// Update a visit
        /// </summary>
        
        /// <param name="body"></param>
        /// <response code="400">Validation exception</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/visit")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVisit")]
        public virtual IActionResult UpdateVisit([FromBody]Visit body)
        { 
            (string, UserType) sender;
            try
            {
                sender = Security.SolveGUID(_context, Request.Headers["Guid"]);
            }
            catch (Exception e)
            {
                return StatusCode(401, e.Message);
            }
            if (sender.Item2!=UserType.WORKSHOP_EMPLOYEE)
                return StatusCode(403); 
            
            var visit = _context.Visits.FirstOrDefault(x => x.VisitId.Equals(body.VisitId));
            if (visit is null)
            {
                return StatusCode(404);
            }

            visit = body;
            
            try
            {
                _context.SaveChanges();
            }
            catch (DbUpdateException)
            {
                return StatusCode(400);
            }
            
            return new ObjectResult(visit);
        }
    }
}
