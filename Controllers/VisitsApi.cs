/*
 * Car Workshop
 *
 * <h2> WILL BE UPDATED!</h2></br><b>Incomplete</b> API for car workshop system (lacks employees and parts management).</br><a href=\"https://app.swaggerhub.com/apis/soft_eng/project/0.1.1\">Swagger project (contains models)</a>.
 *
 * OpenAPI spec version: 0.1.1
 * Contact: k.baciejowski@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using se_project.Attributes;
using Microsoft.AspNetCore.Authorization;
using se_project.Models;

namespace se_project.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VisitsApiController : ControllerBase
    { 
        /// <summary>
        /// Schedule a visit
        /// </summary>
        
        /// <param name="body">Information about scheduled visit. Required actions can be modified later on by an employee.</param>
        /// <response code="400">Validation exception</response>
        [HttpPost]
        [Route("/api/0.1.1/visit")]
        [ValidateModelState]
        [SwaggerOperation("AddVisit")]
        public virtual IActionResult AddVisit([FromBody]Body3 body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Marks diagnostic as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/visit/{visitId}/diagnose")]
        [ValidateModelState]
        [SwaggerOperation("Diagnose")]
        public virtual IActionResult Diagnose([FromRoute][Required]int? visitId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Find visits by Status
        /// </summary>
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/api/0.1.1/visit/find_by_status")]
        [ValidateModelState]
        [SwaggerOperation("FindVisits")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse200>), description: "Successful operation")]
        public virtual IActionResult FindVisits([FromQuery][Required()]List<string> status)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<InlineResponse200>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\n  \"visit\" : {\n    \"date\" : \"2020-12-24T12:00:00+01\",\n    \"requiredActions\" : [ \"oil change\", \"breaks checking\" ],\n    \"visitId\" : 5512,\n    \"price\" : 100.5,\n    \"assignedEmployees\" : [ {\n      \"employeeId\" : 12,\n      \"name\" : \"Bolesław\",\n      \"surname\" : \"Nowak\"\n    }, {\n      \"employeeId\" : 13,\n      \"name\" : \"Katarzyna\",\n      \"surname\" : \"Nowak\"\n    } ],\n    \"status\" : \"atService\"\n  },\n  \"carId\" : 1552\n}, {\n  \"visit\" : {\n    \"date\" : \"2020-12-24T12:00:00+01\",\n    \"requiredActions\" : [ \"oil change\", \"breaks checking\" ],\n    \"visitId\" : 5512,\n    \"price\" : 100.5,\n    \"assignedEmployees\" : [ {\n      \"employeeId\" : 12,\n      \"name\" : \"Bolesław\",\n      \"surname\" : \"Nowak\"\n    }, {\n      \"employeeId\" : 13,\n      \"name\" : \"Katarzyna\",\n      \"surname\" : \"Nowak\"\n    } ],\n    \"status\" : \"atService\"\n  },\n  \"carId\" : 1552\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<InlineResponse200>>(exampleJson)
            : default(List<InlineResponse200>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all client&#39;s visits
        /// </summary>
        
        /// <param name="clientId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Client not found</response>
        [HttpGet]
        [Route("/api/0.1.1/client/{clientId}/visits")]
        [ValidateModelState]
        [SwaggerOperation("GetClientVisits")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Visit>), description: "Successful operation")]
        public virtual IActionResult GetClientVisits([FromRoute][Required]int? clientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Visit>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "[ {\n  \"date\" : \"2020-12-24T12:00:00+01\",\n  \"requiredActions\" : [ \"oil change\", \"breaks checking\" ],\n  \"visitId\" : 5512,\n  \"price\" : 100.5,\n  \"assignedEmployees\" : [ {\n    \"employeeId\" : 12,\n    \"name\" : \"Bolesław\",\n    \"surname\" : \"Nowak\"\n  }, {\n    \"employeeId\" : 13,\n    \"name\" : \"Katarzyna\",\n    \"surname\" : \"Nowak\"\n  } ],\n  \"status\" : \"atService\"\n}, {\n  \"date\" : \"2020-12-24T12:00:00+01\",\n  \"requiredActions\" : [ \"oil change\", \"breaks checking\" ],\n  \"visitId\" : 5512,\n  \"price\" : 100.5,\n  \"assignedEmployees\" : [ {\n    \"employeeId\" : 12,\n    \"name\" : \"Bolesław\",\n    \"surname\" : \"Nowak\"\n  }, {\n    \"employeeId\" : 13,\n    \"name\" : \"Katarzyna\",\n    \"surname\" : \"Nowak\"\n  } ],\n  \"status\" : \"atService\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Visit>>(exampleJson)
            : default(List<Visit>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find visit by Id
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpGet]
        [Route("/api/0.1.1/visit/{visitId}")]
        [ValidateModelState]
        [SwaggerOperation("GetVisit")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse200>), description: "Successful operation")]
        public virtual IActionResult GetVisit([FromRoute][Required]int? visitId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<InlineResponse200>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "[ {\n  \"visit\" : {\n    \"date\" : \"2020-12-24T12:00:00+01\",\n    \"requiredActions\" : [ \"oil change\", \"breaks checking\" ],\n    \"visitId\" : 5512,\n    \"price\" : 100.5,\n    \"assignedEmployees\" : [ {\n      \"employeeId\" : 12,\n      \"name\" : \"Bolesław\",\n      \"surname\" : \"Nowak\"\n    }, {\n      \"employeeId\" : 13,\n      \"name\" : \"Katarzyna\",\n      \"surname\" : \"Nowak\"\n    } ],\n    \"status\" : \"atService\"\n  },\n  \"carId\" : 1552\n}, {\n  \"visit\" : {\n    \"date\" : \"2020-12-24T12:00:00+01\",\n    \"requiredActions\" : [ \"oil change\", \"breaks checking\" ],\n    \"visitId\" : 5512,\n    \"price\" : 100.5,\n    \"assignedEmployees\" : [ {\n      \"employeeId\" : 12,\n      \"name\" : \"Bolesław\",\n      \"surname\" : \"Nowak\"\n    }, {\n      \"employeeId\" : 13,\n      \"name\" : \"Katarzyna\",\n      \"surname\" : \"Nowak\"\n    } ],\n    \"status\" : \"atService\"\n  },\n  \"carId\" : 1552\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<InlineResponse200>>(exampleJson)
            : default(List<InlineResponse200>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Marks maintenance as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/visit/{visitId}/maintain")]
        [ValidateModelState]
        [SwaggerOperation("Maintain")]
        public virtual IActionResult Maintain([FromRoute][Required]int? visitId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Marks repairment as finished
        /// </summary>
        
        /// <param name="visitId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid visit id supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/visit/{visitId}/repair")]
        [ValidateModelState]
        [SwaggerOperation("Repair")]
        public virtual IActionResult Repair([FromRoute][Required]int? visitId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Update a visit
        /// </summary>
        
        /// <param name="body"></param>
        /// <response code="400">Validation exception</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/0.1.1/visit")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVisit")]
        public virtual IActionResult UpdateVisit([FromBody]Visit body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }
    }
}
