/*
 * Car Workshop
 *
 * <h2> WILL BE UPDATED!</h2></br><b>Incomplete</b> API for car workshop system (lacks employees and parts management).</br><a href=\"https://app.swaggerhub.com/apis/soft_eng/project/0.1.1\">Swagger project (contains models)</a>.
 *
 * OpenAPI spec version: 0.1.1
 * Contact: k.baciejowski@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using se_project.Attributes;
using Microsoft.AspNetCore.Authorization;
using se_project.Models;

namespace se_project.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ClientsApiController : ControllerBase
    { 
        /// <summary>
        /// Add new client to the system
        /// </summary>
        
        /// <param name="body">New client attributes</param>
        /// <response code="400">Validation exception</response>
        [HttpPost]
        [Route("/api/0.1.1/client")]
        [ValidateModelState]
        [SwaggerOperation("AddClient")]
        public virtual IActionResult AddClient([FromBody]Body body)
        { 
            Console.WriteLine(body);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(400);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Find client by ID
        /// </summary>
        /// <remarks>Returns a single client</remarks>
        /// <param name="clientId">Id of client to return</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid Id supplied</response>
        /// <response code="404">Client not found</response>
        [HttpGet]
        [Route("/api/0.1.1/client/{clientId}")]
        [ValidateModelState]
        [SwaggerOperation("GetClientById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Client), description: "Successful operation")]
        public virtual IActionResult GetClientById([FromRoute][Required]int? clientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelClient));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"clientId\" : 152,\n  \"phoneNumber\" : \"+48 123 456 789\",\n  \"surname\" : \"Kowalski\",\n  \"name\" : \"Jan\",\n  \"discount\" : 5,\n  \"email\" : \"kowalski@example.com\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Client>(exampleJson)
            : default(Client);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all client&#39;s visits
        /// </summary>
        
        /// <param name="clientId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Client not found</response>
        [HttpGet]
        [Route("/api/0.1.1/client/{clientId}/visits")]
        [ValidateModelState]
        [SwaggerOperation("GetClientVisits")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Visit>), description: "Successful operation")]
        public virtual IActionResult GetClientVisits([FromRoute][Required]int? clientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Visit>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "[ {\n  \"date\" : \"2020-12-24T12:00:00+01\",\n  \"requiredActions\" : [ \"oil change\", \"breaks checking\" ],\n  \"visitId\" : 5512,\n  \"price\" : 100.5,\n  \"assignedEmployees\" : [ {\n    \"employeeId\" : 12,\n    \"name\" : \"Bolesław\",\n    \"surname\" : \"Nowak\"\n  }, {\n    \"employeeId\" : 13,\n    \"name\" : \"Katarzyna\",\n    \"surname\" : \"Nowak\"\n  } ],\n  \"status\" : \"atService\"\n}, {\n  \"date\" : \"2020-12-24T12:00:00+01\",\n  \"requiredActions\" : [ \"oil change\", \"breaks checking\" ],\n  \"visitId\" : 5512,\n  \"price\" : 100.5,\n  \"assignedEmployees\" : [ {\n    \"employeeId\" : 12,\n    \"name\" : \"Bolesław\",\n    \"surname\" : \"Nowak\"\n  }, {\n    \"employeeId\" : 13,\n    \"name\" : \"Katarzyna\",\n    \"surname\" : \"Nowak\"\n  } ],\n  \"status\" : \"atService\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Visit>>(exampleJson)
            : default(List<Visit>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Set client&#39;s discount
        /// </summary>
        /// <remarks>Accepts discount in percentage (0-30)</remarks>
        /// <param name="clientId">Client id</param>
        /// <param name="body">New client&#39;s discount</param>
        /// <response code="400">Validation exception</response>
        /// <response code="404">Client not found</response>
        [HttpPut]
        [Route("/api/0.1.1/client/{clientId}/set_discount")]
        [ValidateModelState]
        [SwaggerOperation("SetDiscount")]
        public virtual IActionResult SetDiscount([FromRoute][Required]int? clientId, [FromBody]Body2 body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Update an existing client
        /// </summary>
        
        /// <param name="body">New client object</param>
        /// <response code="400">Validation exception</response>
        /// <response code="404">Client not found</response>
        [HttpPut]
        [Route("/api/0.1.1/client")]
        [ValidateModelState]
        [SwaggerOperation("UpdateClient")]
        public virtual IActionResult UpdateClient([FromBody]Client body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }
    }
}
